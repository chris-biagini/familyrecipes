<% require 'erb'      -%>
<% include ERB::Util  -%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Biagini Family Recipes: Groceries</title>
  <link rel="stylesheet" href="/style.css">
  
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="shortcut icon" href="/favicon.ico">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  
  <style>
    .hidden-until-js {
      display: none;
    }
    
    #grocery-list {
      columns: 3;
    }
    
    #grocery-list ul {
      list-style-type: circle;
      column-count: 1; 
    }
    
    #grocery-list ul li {
      margin-left: 3rem;
      display: none;
    }

    #grocery-list ul li.is-needed-for-selected-recipes, 
    #grocery-list ul li.is-staple {
      display: list-item;
    }
        
    #grocery-list ul li.is-needed-for-selected-recipes {
      list-style-type: disc;
    }
        
    @media print {
      #recipe-selector, #freeform-entries {
        display: none;
      }
    }
  </style>
</head>
<body>
  <nav>
    <div>
      <a href="/" class="home" title="Home (Table of Contents)">Home</a>
      <a href="/index/" class="index" title="Index of ingredients">Index</a>
      <a href="/groceries/" class="groceries" title="Printable grocery list">Groceries</a>
    </div>
  </nav>
  
  <main>
    <header>
      <h1>Groceries</h1>
    </header>
    
    <noscript>
      <p><em>This page works without JavaScript, but consider enabling it if you would like to generate a custom list from selected recipes.</em></p>
    </noscript>
    
    <div id="recipe-selector" class="hidden-until-js">
      <%- grouped_recipes.each do |category, recipes| -%>
      <details id="<%= category.downcase %>" open>
        <summary><%= category %></summary>
        <ul>
        <%- recipes.each do |recipe| -%>
          <li>
            <input type="checkbox" id="<%= recipe.id %>-checkbox" data-ingredients="<%= html_escape(recipe.all_ingredient_names.to_json) %>">
            <label for="<%= recipe.id %>-checkbox"><%= recipe.title %></label>
            <a href="/<%= recipe.id %>" title="Open <%= recipe.title %> in new tab →" target="_blank">→</a>
          </li>
        <%- end -%>
        </ul>
      </details>
      <%- end -%>
    </div>
    
    <div class="hidden-until-js">
      <textarea id="freeform-entries" rows="10" cols="40" placeholder="Enter grocery items here, one per line."></textarea>
    </div>
          
    <section id="grocery-list">   
      <% ingredient_database.each do |aisle, ingredients| %>
      <h3><%= aisle %></h3>
      <ul>
        <% ingredients.each do |ingredient| %>
          <li<%= ' class="is-staple"' if ingredient[:staple] %>><%= ingredient[:name] %></li>
        <% end %>
      </ul>
      <% end %>
            
      <h3>Miscellaneous</h3>
      <ul id="misc-items"></ul>
    </section>
  </main>

<script>
  (function(){
    const STORAGE_KEY = 'groceries-state';
  
    // 1) Grab all recipe-checkbox inputs
    function getSelectedIds() {
      return Array.from(
        document.querySelectorAll('input[type="checkbox"][data-ingredients]:checked')
      ).map(cb => cb.id.replace(/-checkbox$/, ''));
    }
  
    // 2) Persist to localStorage
    function saveState() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(getSelectedIds()));
    }
  
    // 3) Restore from localStorage
    function restoreState() {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return;
      try {
        JSON.parse(raw).forEach(id => {
          const cb = document.getElementById(id + '-checkbox');
          if (cb) cb.checked = true;
        });
      } catch(e) {
        console.error('Could not parse saved grocery state:', e);
      }
    }
  
    // 4) Main list‑update routine
    function updateGroceryList() {
      const needed = new Set();
  
      // a) From checked recipes
      document.querySelectorAll('input[type="checkbox"][data-ingredients]').forEach(cb => {
        if (!cb.checked) return;
        const items = JSON.parse(cb.dataset.ingredients);
        items.forEach(i => needed.add(i));
      });
  
      // b) From the freeform textarea
      const freeformLines = document.getElementById('freeform-entries')
                                      .value.split(/\r?\n/);
      freeformLines.forEach(line => {
        const t = line.trim();
        if (t) needed.add(t);
      });
  
      // c) Show/hide in the static list
      document.querySelectorAll('#grocery-list ul:not(#misc-items) li')
        .forEach(li => {
          const name = li.textContent.trim();
          if (needed.has(name)) {
            li.classList.add('is-needed-for-selected-recipes');
            needed.delete(name);
          } else {
            li.classList.remove('is-needed-for-selected-recipes');
          }
        });
  
      // d) Dump leftovers into Miscellaneous
      const miscList = document.getElementById('misc-items');
      miscList.innerHTML = '';
      needed.forEach(name => {
        const li = document.createElement('li');
        li.textContent = name;
        li.classList.add('is-needed-for-selected-recipes');
        miscList.appendChild(li);
      });
    }
  
    // Wire it all up
    document.addEventListener('DOMContentLoaded', () => {
      // Reveal JS-only bits
      document.querySelectorAll('.hidden-until-js')
              .forEach(el => el.classList.remove('hidden-until-js'));
  
      // Grab elements
      const recipeCheckboxes = Array.from(
        document.querySelectorAll('input[type="checkbox"][data-ingredients]')
      );
      const freeformInput = document.getElementById('freeform-entries');
  
      // On any checkbox change → save + update
      recipeCheckboxes.forEach(cb =>
        cb.addEventListener('change', () => {
          saveState();
          updateGroceryList();
        })
      );
  
      // On freeform text change → just update
      freeformInput.addEventListener('input', updateGroceryList);
  
      // Restore saved checkboxes, then redraw
      restoreState();
      updateGroceryList();
    });
  })();
  </script>

</body>
</html>