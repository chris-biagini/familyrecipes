<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Biagini Family Recipes: Groceries</title>
  <link rel="stylesheet" href="/style.css">
  
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="shortcut icon" href="/favicon.ico">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  
  <style>
    .hidden-until-js {
      display: none;
    }
    
    #grocery-list {
      columns: 3;
    }
    
    #grocery-list ul {
      list-style-type: circle;
      column-count: 1; 
    }
    
    #grocery-list ul li {
      margin-left: 3rem;
      display: none;
    }

    #grocery-list ul li.is-needed-for-selected-recipes, 
    #grocery-list ul li.is-staple {
      display: list-item;
    }
        
    #grocery-list ul li.is-needed-for-selected-recipes {
      list-style-type: disc;
    }
        
    @media print {
      #recipe-selector, #freeform-entries {
        display: none;
      }
    }
  </style>
</head>
<body>
  <nav>
    <div>
      <a href="/" class="home" title="Home (Table of Contents)">Home</a>
      <a href="/index/" class="index" title="Index of ingredients">Index</a>
      <a href="/groceries/" class="groceries" title="Printable grocery list">Groceries</a>
    </div>
  </nav>
  
  <main>
    <header>
      <h1>Groceries</h1>
    </header>
    
    <noscript>
      <p><em>This page works without JavaScript, but consider enabling it if you would like to generate a custom list from selected recipes.</em></p>
    </noscript>
    
    <div id="recipe-selector" class="hidden-until-js">
      <%- grouped_recipes.each do |category, recipes| -%>
      <details id="<%= category.downcase %>">
        <summary><%= category %></summary>
        <ul>
        <%- recipes.each do |recipe| -%>
          <li>
            <input type="checkbox" id="<%= recipe.id %>-checkbox" data-ingredients='<%= recipe.all_ingredient_names.to_json %>'>
            <label for="<%= recipe.id %>-checkbox"><%= recipe.title %></label>
            <a href="/<%= recipe.id %>" title="Open <%= recipe.title %> in new tab →" target="_blank">→</a>
          </li>
        <%- end -%>
        </ul>
      </details>
      <%- end -%>
    </div>
    
    <div class="hidden-until-js">
      <textarea id="freeform-entries" rows="10" cols="40" placeholder="Enter grocery items here, one per line."></textarea>
    </div>
          
    <section id="grocery-list">   
      <% ingredient_database.each do |aisle, ingredients| %>
      <h3><%= aisle %></h3>
      <ul>
        <% ingredients.each do |ingredient| %>
          <li<%= ' class="is-staple"' if ingredient[:staple] %>><%= ingredient[:name] %></li>
        <% end %>
      </ul>
      <% end %>
            
      <h3>Miscellaneous</h3>
      <ul id="misc-items"></ul>
    </section>
  </main>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    
    document.querySelectorAll('.hidden-until-js').forEach(el => {
      el.classList.remove('hidden-until-js');
    });
    
    // grab all recipe checkboxes
    const checkboxes = document.querySelectorAll('input[type="checkbox"][data-ingredients]');
    const miscList    = document.getElementById('misc-items');
  
    // wire up change‐events
    checkboxes.forEach(cb => cb.addEventListener('change', updateGroceryList));
  
    // listen for input on the freeform textarea
    const freeformInput = document.getElementById('freeform-entries');
    freeformInput.addEventListener('input', updateGroceryList);
      
    // clear boxes on page load
    checkboxes.forEach(cb => cb.checked = false);
  
    function updateGroceryList() {
      // 1) collect all needed ingredients into a Set
      const needed = new Set();
      checkboxes.forEach(cb => {
        if (cb.checked) {
          // parse the JSON array from the parent <li>
          const arr = JSON.parse(cb.dataset.ingredients);
          arr.forEach(item => needed.add(item));
        }
      });
      
      // also add ingredients from the freeform textarea
      const freeformLines = freeformInput.value.split('\n');
      freeformLines.forEach(line => {
        const trimmed = line.trim();
        if (trimmed) needed.add(trimmed);
      });
  
      // 2) clear any old “misc” items
      miscList.innerHTML = '';
  
      // 3) show/hide items in the static grocery list
      //    skip the “Miscellaneous” ul by using :not(#misc-items)
      document
        .querySelectorAll('#grocery-list ul:not(#misc-items) li')
        .forEach(li => {
          li.classList.remove('is-needed-for-selected-recipes');
          const name = li.textContent.trim();
          if (needed.has(name)) {
            li.classList.add('is-needed-for-selected-recipes');
            needed.delete(name);
          }
        });
  
      // 4) whatever’s left in needed → append under Miscellaneous
      needed.forEach(name => {
        const li = document.createElement('li');
        li.textContent = name;
        li.classList.add('is-needed-for-selected-recipes');
        miscList.appendChild(li);
      });
    }
  });
</script>
</body>
</html>