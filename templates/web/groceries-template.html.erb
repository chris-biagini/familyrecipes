<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Grocery List</title>
	<link rel="stylesheet" href="/style.css">
	<style>
		/* Example print stylesheet: when printing, only show the grocery list */
		@media print {
			body * {
				visibility: hidden;
			}
			#grocery-list, #grocery-list * {
				visibility: visible;
			}
			#grocery-list {
				position: absolute;
				left: 0;
				top: 0;
			}
		}
	</style>
</head>
<body>
	<nav>
		<div>
			<a href="/" class="home" title="Home (Table of Contents)">Home</a>
			<a href="/index/" class="index" title="Index of ingredients">Index</a>
			<a href="/groceries/" class="groceries" title="Printable grocery list">Groceries</a>
		</div>
	</nav>
	
	<main>
		<article>
			<header>
				<h1>Grocery List</h1>
			</header>
			
			<!-- Loop over recipes by category -->
			<%- grouped_recipes.each do |category, recipes| -%>
			<section>
				<h2><%= category %></h2>
				<ul>
					<%- recipes.each do |recipe| -%>
					<li>
						<!--
							We add a data attribute holding a JSON array of ingredient objects.
							Each ingredient object includes a normalized name and its quantity (if any).
						-->
						<input type="checkbox" id="recipe-<%= recipe.id %>" data-ingredients='<%= recipe.all_ingredients.map { |ing| { name: ing.normalized_name, quantity: (ing.quantity || "").to_s } }.to_json %>'>
						<label for="recipe-<%= recipe.id %>"><%= recipe.title %></label>
					</li>
					<%- end -%>
				</ul>
			</section>
			<%- end -%>
			
		</article>
		
		<!-- This div will be updated dynamically with the aggregated grocery list -->
		<div id="grocery-list">
			<h2>Your Grocery List</h2>
			<ul></ul>
		</div>
		
	</main>
	
	<script>
		// Helper: combine two quantities.
		// - If both quantities are pure numbers, we add them.
		// - Otherwise, we combine them with a " + " separator (avoiding duplicates).
		function combineQuantities(q1, q2) {
			q1 = q1.trim();
			q2 = q2.trim();
			if (!q1) return q2;
			if (!q2) return q1;
	
			var num1 = parseFloat(q1);
			var num2 = parseFloat(q2);
			// Check if both strings are exactly the numeric value.
			if (!isNaN(num1) && q1 === num1.toString() &&
					!isNaN(num2) && q2 === num2.toString()) {
				return (num1 + num2).toString();
			} else {
				// For non-numeric or mixed values, split on " + " to avoid duplicates.
				var parts = q1.split(' + ');
				if (parts.indexOf(q2) === -1) {
					parts.push(q2);
				}
				return parts.join(' + ');
			}
		}
	
		// This function aggregates ingredients from all checked recipes.
		function updateGroceryList() {
			const aggregatedIngredients = {};
			
			// Loop over all checked recipe checkboxes.
			document.querySelectorAll('input[type="checkbox"]:checked').forEach(function(checkbox) {
				let ingredients;
				try {
					ingredients = JSON.parse(checkbox.dataset.ingredients);
				} catch (e) {
					console.error("Error parsing ingredients for checkbox", checkbox, e);
					return;
				}
	
				// For each ingredient, aggregate by name.
				ingredients.forEach(function(ing) {
					const name = ing.name;
					// Ensure quantity is a string; trim it so empty strings are handled.
					const qty = ing.quantity ? ing.quantity.toString().trim() : "";
					if (aggregatedIngredients[name]) {
						aggregatedIngredients[name] = combineQuantities(aggregatedIngredients[name], qty);
					} else {
						aggregatedIngredients[name] = qty;
					}
				});
			});
	
			// Update the grocery list <ul> with aggregated ingredients.
			const groceryListUl = document.querySelector('#grocery-list ul');
			groceryListUl.innerHTML = '';  // Clear the previous list
	
			// Sort ingredients alphabetically.
			const sortedNames = Object.keys(aggregatedIngredients).sort();
			sortedNames.forEach(function(name) {
				const qty = aggregatedIngredients[name];
				const li = document.createElement('li');
				li.textContent = qty ? `${name} (${qty})` : name;
				groceryListUl.appendChild(li);
			});
		}
	
		// Attach event listeners to checkboxes.
		document.querySelectorAll('input[type="checkbox"]').forEach(function(cb) {
			cb.addEventListener('change', updateGroceryList);
		});
	
		// Update the list on page load (in case any boxes are pre-checked).
		updateGroceryList();
	</script>
	
	<!-- <script src="script.js" defer></script> -->
</body>
</html>