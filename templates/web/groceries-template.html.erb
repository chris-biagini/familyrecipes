<% require 'erb'      -%>
<% include ERB::Util  -%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Biagini Family Recipes: Groceries</title>
  <link rel="stylesheet" href="/style.css">
  
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="shortcut icon" href="/favicon.ico">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  
  <style>
    .hidden-until-js {
      display: none;
    }
    
    #grocery-list {
      columns: 4;
    }
    
    div.aisle {
      break-inside: avoid;
    }
        
    #grocery-list ul {
      list-style-type: circle;
      column-count: 1; 
    }
    
    #grocery-list ul li {
      margin-left: 3rem;
      display: none;
    }

    #grocery-list ul li.is-needed-for-selected-recipes, 
    #grocery-list ul li.is-staple {
      display: list-item;
    }
        
    #grocery-list ul li.is-needed-for-selected-recipes {
      list-style-type: disc;
    }
        
    @media print {
      #recipe-selector, #freeform-entries {
        display: none;
      }
    }
  </style>
</head>
<body>
  <nav>
    <div>
      <a href="/" class="home" title="Home (Table of Contents)">Home</a>
      <a href="/index/" class="index" title="Index of ingredients">Index</a>
      <a href="/groceries/" class="groceries" title="Printable grocery list">Groceries</a>
    </div>
  </nav>
  
  <main>
    <header>
      <h1>Groceries</h1>
    </header>
    
    <noscript>
      <p><em>This page works without JavaScript, but consider enabling it if you would like to generate a custom list from selected recipes.</em></p>
    </noscript>
    
    <div id="recipe-selector" class="hidden-until-js">
      <%- grouped_recipes.each do |category, recipes| -%>
      <% category_id = category.downcase.gsub(/[^a-z0-9]+/, '-') %>
      <details id="<%= category_id %>" open>
        <summary><%= category %></summary>
        <ul>
        <%- recipes.each do |recipe| -%>
          <li>
            <input type="checkbox" id="<%= recipe.id %>-checkbox" data-title="<%= html_escape(recipe.title) %>" data-ingredients="<%= html_escape(recipe.all_ingredient_names.to_json) %>">
            <label for="<%= recipe.id %>-checkbox" title="Ingredients: <%= html_escape(recipe.all_ingredient_names.join(', ')) %>"><%= recipe.title %></label>
            <% unless recipe.is_a?(QuickBite) %><a href="/<%= recipe.id %>" title="Open <%= recipe.title %> in new tab →" target="_blank">→</a><% end %>
          </li>
        <%- end -%>
        </ul>
      </details>
      <%- end -%>
    </div>
    
    <div class="hidden-until-js">
      <textarea id="freeform-entries" rows="10" cols="40" placeholder="Enter grocery items here, one per line."></textarea>
    </div>
          
    <section id="grocery-list">   
      <% ingredient_database.each do |aisle, ingredients| %>
      <div class="aisle"<%= ' style="display:none"' if aisle == "Omit_From_List" %>>
        <h3><%= aisle %></h3>
        <ul>
          <% ingredients.each do |ingredient| %>
            <li<%= ' class="is-staple"' if ingredient[:staple] %>><%= ingredient[:name] %></li>
          <% end %>
        </ul>
      </div>
      <% end %>
     
      <div class="aisle">
        <h3>Miscellaneous</h3>
        <ul id="misc-items"></ul>
      </div>
    </section>
  </main>

<script>
    (function(){
      const STORAGE_KEY = 'groceries-state';
  
      function saveState() {
        const ids = Array.from(
          document.querySelectorAll('input[type="checkbox"][data-ingredients]:checked')
        ).map(cb => cb.id.replace(/-checkbox$/, ''));
        localStorage.setItem(STORAGE_KEY, JSON.stringify(ids));
      }
  
      function restoreState() {
        const raw = localStorage.getItem(STORAGE_KEY);
        if (!raw) return;
        try {
          JSON.parse(raw).forEach(id => {
            const cb = document.getElementById(id + '-checkbox');
            if (cb) cb.checked = true;
          });
        } catch(e) {
          console.error('Could not parse saved grocery state:', e);
        }
      }
  
      function updateGroceryList() {
        // A Map: ingredientName → Set of recipe titles that need it
        const neededMap = new Map();
  
        // (a) from checked recipes
        document.querySelectorAll('input[type="checkbox"][data-ingredients]').forEach(cb => {
          if (!cb.checked) return;
          const recipeTitle = cb.dataset.title;
          const items = JSON.parse(cb.dataset.ingredients);
          items.forEach(name => {
            if (!neededMap.has(name)) neededMap.set(name, new Set());
            neededMap.get(name).add(recipeTitle);
          });
        });
  
        // (b) from the freeform textarea (we still want to show these, but they won’t get a "Needed for")
        document.getElementById('freeform-entries').value
          .split(/\r?\n/)
          .map(l => l.trim())
          .filter(l => l)
          .forEach(name => {
            if (!neededMap.has(name)) neededMap.set(name, new Set());
          });
  
        // (c) show/hide & title for your static list items
        document
          .querySelectorAll('#grocery-list ul:not(#misc-items) li')
          .forEach(li => {
            const name = li.textContent.trim();
            const titles = neededMap.get(name);
            if (titles) {
              li.classList.add('is-needed-for-selected-recipes');
              if (titles.size > 0) {
                li.setAttribute(
                  'title',
                  'Needed for: ' + Array.from(titles).join(', ')
                );
              } else {
                li.removeAttribute('title');
              }
              neededMap.delete(name);
            } else {
              li.classList.remove('is-needed-for-selected-recipes');
              li.removeAttribute('title');
            }
          });
  
        // (d) dump everything else (leftovers) into Miscellaneous
        const misc = document.getElementById('misc-items');
        misc.innerHTML = '';
        neededMap.forEach((titles, name) => {
          const li = document.createElement('li');
          li.textContent = name;
          li.classList.add('is-needed-for-selected-recipes');
          if (titles.size > 0) {
            li.setAttribute(
              'title',
              'Needed for: ' + Array.from(titles).join(', ')
            );
          }
          misc.appendChild(li);
        });
      }
  
      document.addEventListener('DOMContentLoaded', () => {
        // reveal the JS-only bits
        document.querySelectorAll('.hidden-until-js')
                .forEach(el => el.classList.remove('hidden-until-js'));
  
        // wire up events
        const cbs = Array.from(
          document.querySelectorAll('input[type="checkbox"][data-ingredients]')
        );
        const freeform = document.getElementById('freeform-entries');
  
        cbs.forEach(cb => cb.addEventListener('change', () => {
          saveState();
          updateGroceryList();
        }));
        freeform.addEventListener('input', updateGroceryList);
  
        // restore + initial draw
        restoreState();
        updateGroceryList();
      });
    })();
</script>

</body>
</html>