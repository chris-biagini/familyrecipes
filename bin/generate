#!/usr/bin/env ruby

# Load libraries and classes
require_relative '../lib/familyrecipes'

# Define project root as the current directory
project_root = File.expand_path("..", __dir__)

recipes_dir   = File.join(project_root, "recipes")
template_dir  = File.join(project_root, "templates/web")
resources_dir = File.join(project_root, "resources/web")
output_dir    = File.join(project_root, "output/web")
grocery_info_path = File.join(project_root, "resources/grocery-info.yaml")

# helper function to avoid rewriting files that haven't changed
def write_file_if_changed(path, content)
  if File.exist?(path)
    existing_content = File.read(path)
    return if existing_content == content
  end

  File.write(path, content)
  puts "Updated: #{path}"
end

# parse recipes; actual parsing happens in Recipe constructor
print "Parsing recipes from #{recipes_dir}..."

recipe_files = Dir.glob(File.join(recipes_dir, "**", "*")).select do |file|
  File.file?(file) && File.basename(file) != "Quick Bites.txt"
end

recipes_array = recipe_files.map do |file|
  source = File.read(file)
  
  id = File.basename(file, ".*")  # Get name without extension
        .unicode_normalize(:nfkd) # Normalize Unicode characters
        .downcase                 # Convert to lowercase
        .gsub(/\s+/, '-')         # Replace spaces with hyphens
        .gsub(/[^a-z0-9\-]/, '')  # Remove non-alphanumeric characters except hyphens
    
  category = File.basename(File.dirname(file)).sub(/^./, &:upcase)
  
  recipe = Recipe.new(markdown_source: source, id: id, category: category)
end

quick_bite_sources = []

File.foreach(File.join(recipes_dir, "Quick Bites.txt")) do |line|
  if line.start_with?("  - ")
    quick_bite_sources << line.sub("  - ", "").strip
  end
end

quick_bites_array = quick_bite_sources.map do |line|
  category = "Quick Bites"
  
  QuickBite.new(text_source: line, category: category)
end

print "done! (Parsed #{recipes_array.size} recipes and #{quick_bites_array.size} quick bites.)\n"  

# make output directory
FileUtils.mkdir_p(output_dir)

# write text and HTML files to output directory
print "Generating output files in #{output_dir}..."

recipes_array.each do |recipe|
  # Write text version
  text_path = File.join(output_dir, "#{recipe.id}.txt")
  write_file_if_changed(text_path, recipe.source)
  
  # Write HTML version
  template_path = File.join(template_dir, "recipe-template.html.erb")
  html_path = File.join(output_dir, "#{recipe.id}.html")
  write_file_if_changed(html_path, recipe.to_html(erb_template_path: template_path))
end

print "done!\n"

# Copy resources (e.g., stylesheets, javascript)
print "Copying web resources from #{resources_dir} to #{output_dir}..."
Dir.glob(File.join(resources_dir, '**', '*')).each do |source_file|
  next if File.directory?(source_file)

  # Get the relative path from the resources directory.
  relative_path = source_file.sub("#{resources_dir}/", '')

  # Special case: if the file is named 'htaccess', rename it to '.htaccess'
  if File.basename(source_file) == "htaccess"
    relative_path = File.join(File.dirname(relative_path), ".htaccess")
  end

  dest_file = File.join(output_dir, relative_path)

  if !File.exist?(dest_file) || !FileUtils.identical?(source_file, dest_file)
    FileUtils.mkdir_p(File.dirname(dest_file))
    FileUtils.cp(source_file, dest_file)
    puts "Copied: #{relative_path}"
  end
end
print "done!\n"

# build home page
print "Generating homepage in #{output_dir}..."

recipes_by_category = recipes_array.group_by(&:category) # hash of recipes, with categories as keys
quick_bites_by_category = quick_bites_array.group_by(&:category) # hash of quick bites, with categories as keys

# Read and process the template
template_path = File.join(template_dir, "homepage-template.html.erb")
erb_template = ERB.new(File.read(template_path), trim_mode: "-")

# Generate the homepage file
homepage_path = File.join(output_dir, "index.html")
write_file_if_changed(homepage_path, erb_template.result_with_hash(grouped_recipes: recipes_by_category))

print "done!\n"

# Generate index
print "Generating index..."

recipes_by_ingredient = Hash.new { |hash, key| hash[key] = [] } # hash of recipes, with ingredients as keys
recipes_array.each do |recipe|
    recipe.all_ingredients.each do |ingredient|
      recipes_by_ingredient[ingredient.normalized_name] << recipe
    end
end
sorted_ingredients = recipes_by_ingredient.sort_by { |ingredient_name, _| ingredient_name.downcase }

template_path = File.join(template_dir, "index-template.html.erb")
erb_template = ERB.new(File.read(template_path), trim_mode: "-")
index_path = File.join(output_dir, "index", "index.html")
FileUtils.mkdir_p(File.dirname(index_path))  # Ensure directory exists
write_file_if_changed(index_path, erb_template.result_with_hash(sorted_ingredients: sorted_ingredients))

print "done!\n"

# Build grocery page
print "Generating groceries page..."
grocery_info_raw = YAML.load_file(grocery_info_path)
grocery_info = {}

grocery_info_raw.each do |aisle, items|
  grocery_info[aisle] = items.map do |item|
    {
      name: item.chomp('*'),
      staple: item.end_with?('*')
    }
  end
end

combined_recipes_and_quick_bites_by_category = recipes_by_category.merge(quick_bites_by_category)

template_path = File.join(template_dir, "groceries-template.html.erb")
erb_template = ERB.new(File.read(template_path), trim_mode: "-")
groceries_path = File.join(output_dir, "groceries", "index.html")
FileUtils.mkdir_p(File.dirname(groceries_path))  # Ensure directory exists
# Pass both recipes_by_category and the ingredient database to the template.
write_file_if_changed(groceries_path, erb_template.result_with_hash(grouped_recipes: combined_recipes_and_quick_bites_by_category, ingredient_database: grocery_info))
print "done!\n"
