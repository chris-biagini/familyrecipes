#!/usr/bin/env ruby

# Load libraries and classes
require_relative '../lib/familyrecipes'

# Define project root as the current directory
project_root = File.expand_path("..", __dir__)

recipes_dir   = File.join(project_root, "recipes")
template_dir  = File.join(project_root, "templates/web")
resources_dir = File.join(project_root, "resources/web")
output_dir    = File.join(project_root, "output/web")
ingredient_db_path = File.join(project_root, "resources/ingredient-db.yaml")

# helper function to avoid rewriting files that haven't changed
def write_file_if_changed(path, content)
  if File.exist?(path)
    existing_content = File.read(path)
    return if existing_content == content
  end

  File.write(path, content)
  puts "Updated: #{path}"
end

# parse recipes; actual parsing happens in Recipe constructor
print "Parsing recipes from #{recipes_dir}..."

recipe_files = Dir.glob(File.join(recipes_dir, "**", "*")).select { |file| File.file?(file) }
recipes = recipe_files.map do |file|
  Recipe.new(file)
end

print "done! (Parsed #{recipes.size} recipes.)\n"  

# make output directory
FileUtils.mkdir_p(output_dir)

# write text and HTML files to output directory
print "Generating output files in #{output_dir}..."

recipes.each do |recipe|
  # Write text version
  text_path = File.join(output_dir, "#{recipe.id}.txt")
  write_file_if_changed(text_path, recipe.source)
  
  # Write HTML version
  template_path = File.join(template_dir, "recipe-template.html.erb")
  html_path = File.join(output_dir, "#{recipe.id}.html")
  write_file_if_changed(html_path, recipe.to_html(erb_template_path: template_path))
end

print "done!\n"

# Copy resources (e.g., stylesheets, javascript)
print "Copying web resources from #{resources_dir} to #{output_dir}..."
Dir.glob(File.join(resources_dir, '**', '*')).each do |source_file|
  next if File.directory?(source_file)

  # Get the relative path from the resources directory.
  relative_path = source_file.sub("#{resources_dir}/", '')

  # Special case: if the file is named 'htaccess', rename it to '.htaccess'
  if File.basename(source_file) == "htaccess"
    relative_path = File.join(File.dirname(relative_path), ".htaccess")
  end

  dest_file = File.join(output_dir, relative_path)

  if !File.exist?(dest_file) || !FileUtils.identical?(source_file, dest_file)
    FileUtils.mkdir_p(File.dirname(dest_file))
    FileUtils.cp(source_file, dest_file)
    puts "Copied: #{relative_path}"
  end
end
print "done!\n"

# build home page
print "Generating homepage in #{output_dir}..."

grouped_recipes = recipes.group_by(&:category) # hash of recipes, with categories as keys

# Read and process the template
template_path = File.join(template_dir, "homepage-template.html.erb")
erb_template = ERB.new(File.read(template_path), trim_mode: "-")

# Generate the homepage file
homepage_path = File.join(output_dir, "index.html")
write_file_if_changed(homepage_path, erb_template.result_with_hash(grouped_recipes: grouped_recipes))

print "done!\n"

# Generate index
print "Generating index..."

ingredient_usage = Hash.new { |hash, key| hash[key] = [] }
recipes.each do |recipe|
    recipe.all_ingredients.each do |ingredient|
      ingredient_usage[ingredient.normalized_name] << recipe
    end
end
sorted_ingredients = ingredient_usage.sort_by { |ingredient_name, _| ingredient_name.downcase }

template_path = File.join(template_dir, "index-template.html.erb")
erb_template = ERB.new(File.read(template_path), trim_mode: "-")
index_path = File.join(output_dir, "index", "index.html")
FileUtils.mkdir_p(File.dirname(index_path))  # Ensure directory exists
write_file_if_changed(index_path, erb_template.result_with_hash(sorted_ingredients: sorted_ingredients))

print "done!\n"

# Build grocery page
print "Generating groceries page..."

# Load the ingredient database
ingredient_db = YAML.load_file(ingredient_db_path)
print "Loaded ingredient database from #{ingredient_db_path}\n"

# Build recipes_db as an associative array keyed by recipe.id.
recipes_db = {}
recipes.each do |recipe|
  recipes_db[recipe.id] = {
    title: recipe.title,
    category: recipe.category,  # assuming your Recipe objects have a category attribute
    ingredients: recipe.all_ingredients.map do |ing|
      {
        name: ing.normalized_name,
        value: (ing.quantity_value || "").to_s,
        unit: (ing.quantity_unit || "").to_s
      }
    end
  }
end

# Add a special entry for staples by scanning the ingredient DB.
staple_ingredients = ingredient_db.select { |name, details| details["is_staple"] }
                                  .map { |name, details| { name: name, value: "", unit: "" } }
recipes_db["staples"] = {
  title: "Staples",
  ingredients: staple_ingredients
}

template_path = File.join(template_dir, "groceries-template.html.erb")
erb_template = ERB.new(File.read(template_path), trim_mode: "-")
groceries_path = File.join(output_dir, "groceries", "index.html")
FileUtils.mkdir_p(File.dirname(groceries_path))  # Ensure directory exists
# Pass both grouped_recipes and the ingredient database to the template.
write_file_if_changed(groceries_path, erb_template.result_with_hash(
  recipes_db: recipes_db,
  ingredient_db: ingredient_db
))
print "done!\n"
